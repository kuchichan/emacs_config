#+STARTIP: overview

* Interface Tweaks
#+BEGIN_SRC emacs-lisp 
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-linum-mode t)
#+END_SRC
* Try Package
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
 :ensure t) 
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC
* Org-things
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :hook (org-mode . org-bullets-mode))
#+END_SRC
** TODO_TWEAKS
   Aditional keyword for progress
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
  '((sequence "TODO" "IN PROGRESS" "|" "DONE")))
(setq org-log-done 'time)
#+END_SRC
* Windows-package
#+BEGIN_SRC emacs-lisp
(defalias 'list-buffers 'ibuffer-other-window)

(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    ))
#+END_SRC
* Navigating & searching
#+BEGIN_SRC emacs-lisp
(use-package counsel
:ensure t
)

(use-package swiper
  :ensure try
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config (ivy-mode 1)
  :bind ("C-r" . counsel-expression-history)
  :custom (
  (ivy-use-virtual-buffers t)
  (ivy-display-style 'fancy))
)
#+END_SRC
* Language servers
#+BEGIN_SRC emacs-lisp

  (use-package lsp-python-ms
  :ensure t
  :init (setq lsp-python-ms-auto-install-server t)
  :hook (python-mode . (lambda ()
                          (require 'lsp-python-ms)
                          (lsp))))  ; or lsp-deferred
  (use-package lsp-mode
    :hook ((js-mode . lsp)
	   (lsp-mode . lsp-enable-which-key-integration))
    :custom (lsp-keymap-prefix "s-l")
    :commands lsp
    :config (with-eval-after-load 'lsp-mode
	      (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration))
    )

  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package company-lsp 
    :commands company-lsp
    :custom ((company-minimum-prefix-length 1)
	     (company-idle-delay 0.0))) ;; default is 0.2
    ;; ivy-user
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  ;; optionally if you want to use debugger
  ;; (require 'dap-lldb)
  ;; (require 'dap-python)

  (use-package dap-mode
    :ensure t
    :config
    (dap-mode 1)
    (dap-ui-mode 1))

  (use-package ccls
    :ensure t
    :hook ((c-mode c++-mode objc-mode cuda-mode) .
	   (lambda () (require 'ccls) (lsp)))
    :custom (
	     (ccls-executable "/snap/bin/ccls")
	     (ccls-sem-highlight-method 'font-lock)))

  (use-package gcmh
    :ensure t
    :config (gcmh-mode 1))

  (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))
  (setq read-process-output-max (* 1024 1024))
#+END_SRC
* Themes
#+BEGIN_SRC emacs-lisp
  (use-package color-theme-sanityinc-tomorrow
     :ensure color-theme-sanityinc-tomorrow
     :config (load-theme 'sanityinc-tomorrow-eighties t)
  )

  ;; (load-theme 'leuven)
    ;; (use-package sublime-themes
    ;;  :ensure sublime-themes
    ;;  :config (load-theme 'granger t)) 
#+END_SRC
* Python Development 
#+BEGIN_SRC emacs-lisp
  ;; (use-package flycheck
  ;;   :ensure t
  ;;   :init (global-flycheck-mode 1))
  ;; (use-package elpy
  ;;   :ensure t
  ;;   :config 
  ;;   (elpy-enable))
#+END_SRC
* Clojure Development
#+BEGIN_SRC emacs-lisp

;; Based on "Clojure for brave and true" book, but with use-package isolation
  (use-package paredit
    :ensure t
  )

  (use-package clojure-mode
    :ensure t
    :hook
    (
     (clojure-mode . enable-paredit-mode) ;; paredit for clojure
     (clojure-mode . subword-mode)
     (clojure-mode . (lambda ()
	      (setq inferior-lisp-program "lein repl") 
	      (font-lock-add-keywords
	       nil
	       '(("(\\(facts?\\)"
		  (1 font-lock-keyword-face))
		 ("(\\(background?\\)"
		  (1 font-lock-keyword-face))))
	      (define-clojure-indent (fact 1))
	      (define-clojure-indent (facts 1))
	      (rainbow-delimiters-mode)))) 
  )


  (use-package clojure-mode-extra-font-locking
    :ensure t
  )

  (use-package rainbow-delimiters
    :ensure t
  )

  (use-package cider
    :ensure t
    :hook
    (cider-repl-mode . paredit-mode)
    :config
    (progn
      (add-hook 'cider-mode-hook 'eldoc-mode) ;;proivdes minibuffer docs
      (setq cider-repl-pop-to-buffer-on-connect t) ;; go right to the repl when finished connecting
      (setq cider-show-error-buffer t)
      (setq cider-auto-select-error-buffer t)
      (setq cider-repl-history-file "~/.emacs.d/cider-history")
      (setq cider-repl-wrap-history t)
      )
    )

  ;; Use clojure mode for other extensions
  (add-to-list 'auto-mode-alist '("\\.edn$" . clojure-mode))
  (add-to-list 'auto-mode-alist '("\\.boot$" . clojure-mode))
  (add-to-list 'auto-mode-alist '("\\.cljs.*$" . clojure-mode))
  (add-to-list 'auto-mode-alist '("lein-env" . enh-ruby-mode))


  ;; key bindings
  ;; these help me out with the way I usually develop web apps
  (defun cider-start-http-server ()
    (interactive)
    (cider-load-current-buffer)
    (let ((ns (cider-current-ns)))
      (cider-repl-set-ns ns)
      (cider-interactive-eval (format "(println '(def server (%s/start))) (println 'server)" ns))
      (cider-interactive-eval (format "(def server (%s/start)) (println server)" ns))))


  (defun cider-refresh ()
    (interactive)
    (cider-interactive-eval (format "(user/reset)")))

  (defun cider-user-ns ()
    (interactive)
    (cider-repl-set-ns "user"))

  (eval-after-load 'cider
    '(progn
       (define-key clojure-mode-map (kbd "C-c C-v") 'cider-start-http-server)
       (define-key clojure-mode-map (kbd "C-M-r") 'cider-refresh)
       (define-key clojure-mode-map (kbd "C-c u") 'cider-user-ns)
       (define-key cider-mode-map (kbd "C-c u") 'cider-user-ns)))
#+END_SRC
* Go development
#+BEGIN_SRC emacs-lisp
  ;; (use-package go-mode
  ;;   :ensure t
  ;;   :hook ((before-save-hook . gofmt-before-save))
  ;;   )
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC 
* Tweaks for OSX
#+BEGIN_SRC  emacs-lisp
(if (eq system-type 'darwin)
    (progn 
        (use-package exec-path-from-shell
             :ensure t
             :init (exec-path-from-shell-initialize))
        (setq mac-command-modifier 'meta)
        (exec-path-from-shell-copy-envs '("PATH")))
)
#+END_SRC
* Powerline
#+BEGIN_SRC emacs-lisp
(use-package powerline
   :ensure t
   :config (powerline-default-theme))
#+END_SRC
* NYAN !!!!
#+BEGIN_SRC emacs-lisp
(use-package nyan-mode
  :ensure t
  :config (nyan-mode)
)
#+END_SRC
* Wrap region & smartparens
#+BEGIN_SRC emacs-lisp
(use-package wrap-region
  :ensure t
  :config (wrap-region-mode t)
)
(use-package smartparens
  :ensure t
)
#+END_SRC
