#+STARTIP: overview

* Interface Tweaks
#+BEGIN_SRC emacs-lisp 
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-linum-mode t)
#+END_SRC
* Try Package
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
 :ensure t) 
#+END_SRC
* Which-key Package
Help for noobs like me
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC
* Org-things
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
* Windows-package
#+BEGIN_SRC emacs-lisp
(defalias 'list-buffers 'ibuffer-other-window)

(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    ))
#+END_SRC
* Navigating & searching
#+BEGIN_SRC emacs-lisp
;; (setq indo-enable-flex-matching)
;; (setq ido-everywhere t)
;; (ido-mode 1)

(use-package counsel
:ensure t
)

(use-package swiper
  :ensure try
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    )
  )
#+END_SRC
* Auto-complete
#+BEGIN_SRC emacs-lisp
(defun auto-complete-for-go ()
(auto-complete-mode 1))
 (add-hook 'go-mode-hook 'auto-complete-for-go)

(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
(use-package go-autocomplete
  :ensure t
)
(with-eval-after-load 'go-mode
   (require 'go-autocomplete))

#+END_SRC
* Language server for python
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :config
  (require 'lsp-clients)
  (add-hook 'python-mode-hook 'lsp)
  ;; get lsp-python-enable defined
  ;; NB: use either projectile-project-root or ffip-get-project-root-directory
  ;;     or any other function that can be used to find the root directory of a project
  (defun lsp-set-cfg ()
    (let ((lsp-cfg `(:pyls (:configurationSources ("flake8")))))
      ;; TODO: check lsp--cur-workspace here to decide per server / project
      (lsp--set-configuration lsp-cfg)))

)
(use-package company-lsp
 :ensure t)
(use-package lsp-ui
 :ensure t)
#+END_SRC
* Themes
#+BEGIN_SRC emacs-lisp
(use-package color-theme-sanityinc-tomorrow
 :ensure color-theme-sanityinc-tomorrow
 :config (load-theme 'sanityinc-tomorrow-night t))
#+END_SRC
* Python Development (deprecated)
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode 1))
  (use-package elpy
    :ensure t
    :config 
    (elpy-enable))
#+END_SRC
* Clojure Development
#+BEGIN_SRC emacs-lisp

;; Based on "Clojure for brave and true" book, but with use-package isolation

  (use-package paredit
    :ensure t
  )

  (use-package clojure-mode
    :ensure t
    :hook
    (
     (clojure-mode . enable-paredit-mode) ;; paredit for clojure
     (clojure-mode . subword-mode)
     (clojure-mode . (lambda ()
	      (setq inferior-lisp-program "lein repl") 
	      (font-lock-add-keywords
	       nil
	       '(("(\\(facts?\\)"
		  (1 font-lock-keyword-face))
		 ("(\\(background?\\)"
		  (1 font-lock-keyword-face))))
	      (define-clojure-indent (fact 1))
	      (define-clojure-indent (facts 1))
	      (rainbow-delimiters-mode)))) 
  )



  (use-package clojure-mode-extra-font-locking
    :ensure t
  )

  (use-package rainbow-delimiters
    :ensure t
  )

  (use-package cider
    :ensure t
    :hook
    (cider-repl-mode . paredit-mode)
    :config
    (progn
      (add-hook 'cider-mode-hook 'eldoc-mode) ;;proivdes minibuffer docs
      (setq cider-repl-pop-to-buffer-on-connect t) ;; go right to the repl when finished connecting
      (setq cider-show-error-buffer t)
      (setq cider-auto-select-error-buffer t)
      (setq cider-repl-history-file "~/.emacs.d/cider-history")
      (setq cider-repl-wrap-history t)
      )
    )

  ;; Use clojure mode for other extensions
  (add-to-list 'auto-mode-alist '("\\.edn$" . clojure-mode))
  (add-to-list 'auto-mode-alist '("\\.boot$" . clojure-mode))
  (add-to-list 'auto-mode-alist '("\\.cljs.*$" . clojure-mode))
  (add-to-list 'auto-mode-alist '("lein-env" . enh-ruby-mode))


  ;; key bindings
  ;; these help me out with the way I usually develop web apps
  (defun cider-start-http-server ()
    (interactive)
    (cider-load-current-buffer)
    (let ((ns (cider-current-ns)))
      (cider-repl-set-ns ns)
      (cider-interactive-eval (format "(println '(def server (%s/start))) (println 'server)" ns))
      (cider-interactive-eval (format "(def server (%s/start)) (println server)" ns))))


  (defun cider-refresh ()
    (interactive)
    (cider-interactive-eval (format "(user/reset)")))

  (defun cider-user-ns ()
    (interactive)
    (cider-repl-set-ns "user"))

  (eval-after-load 'cider
    '(progn
       (define-key clojure-mode-map (kbd "C-c C-v") 'cider-start-http-server)
       (define-key clojure-mode-map (kbd "C-M-r") 'cider-refresh)
       (define-key clojure-mode-map (kbd "C-c u") 'cider-user-ns)
       (define-key cider-mode-map (kbd "C-c u") 'cider-user-ns)))
#+END_SRC
* Go development
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :hook ((before-save-hook . gofmt-before-save))
    )
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC 
* Tweaks for OSX
#+BEGIN_SRC  emacs-lisp
(if (eq system-type 'darwin)
    (progn 
        (use-package exec-path-from-shell
             :ensure t
             :init (exec-path-from-shell-initialize))
        (setq mac-command-modifier 'meta)
        (exec-path-from-shell-copy-envs '("PATH")))
)
#+END_SRC
* Powerline
#+BEGIN_SRC emacs-lisp
(use-package powerline
   :ensure t
   :config (powerline-default-theme))
#+END_SRC
* Spotify
#+BEGIN_SRC emacs-lisp 
(use-package spotify
:load-path "~/.emacs.d/spotify.el")

(setq spotify-oauth2-client-secret "06a516b892704b5abb64baddf66bac13") 
(setq spotify-oauth2-client-id "fe05658b86b14f10a5ca641a92e9431f")
;;(setq spotify-transport 'connect)
#+END_SRC
